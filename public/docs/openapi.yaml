openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/projects:
    get:
      summary: 'Get projects list'
      operationId: getProjectsList
      description: 'Return projects list.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 18
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 18
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 12
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 12
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: 1
                      name: 'Test project'
                      location: Warsaw
                      description: ''
                      owner: john@doe.com
                      created_at: '2020-01-01 10:00:00'
                      tasks:
                        -
                          total: 10
                          opened: 3
                          me: 1
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Test project'
                        location: Warsaw
                        description: ''
                        owner: john@doe.com
                        created_at: '2020-01-01 10:00:00'
                        tasks:
                          -
                            total: 10
                            opened: 3
                            me: 1
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Test project'
                        location:
                          type: string
                          example: Warsaw
                        description:
                          type: string
                          example: ''
                        owner:
                          type: string
                          example: john@doe.com
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        tasks:
                          type: array
                          example:
                            -
                              total: 10
                              opened: 3
                              me: 1
                          items:
                            type: object
                            properties:
                              total:
                                type: integer
                                example: 10
                              opened:
                                type: integer
                                example: 3
                              me:
                                type: integer
                                example: 1
      tags:
        - Projects
      security: []
  /api/project:
    put:
      summary: 'Create new project'
      operationId: createNewProject
      description: 'Create new project.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Project name.'
                  example: ea
                location:
                  type: string
                  description: 'Project location.'
                  example: rem
                description:
                  type: string
                  description: 'Project description.'
                  example: 'Esse molestiae consequuntur cupiditate excepturi quidem.'
                owner:
                  type: string
                  description: 'Project owner.'
                  example: atque
              required:
                - name
      security: []
  '/api/project/{id}':
    get:
      summary: 'Get project details'
      operationId: getProjectDetails
      description: 'Return project details.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Test project'
                  location: Warsaw
                  description: ''
                  owner: john@doe.com
                  created_at: '2020-01-01 10:00:00'
                  tasks:
                    -
                      total: 10
                      opened: 3
                      me: 1
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Test project'
                  location:
                    type: string
                    example: Warsaw
                  description:
                    type: string
                    example: ''
                  owner:
                    type: string
                    example: john@doe.com
                  created_at:
                    type: string
                    example: '2020-01-01 10:00:00'
                  tasks:
                    type: array
                    example:
                      -
                        total: 10
                        opened: 3
                        me: 1
                    items:
                      type: object
                      properties:
                        total:
                          type: integer
                          example: 10
                        opened:
                          type: integer
                          example: 3
                        me:
                          type: integer
                          example: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Project does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Project does not exist'
      tags:
        - Projects
      security: []
    put:
      summary: 'Update project'
      operationId: updateProject
      description: 'Update project.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Projects
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Project name.'
                  example: ut
                location:
                  type: string
                  description: 'Project location.'
                  example: explicabo
                description:
                  type: string
                  description: 'Project description.'
                  example: 'Laudantium sint autem debitis et voluptate quisquam.'
                owner:
                  type: string
                  description: 'Project owner.'
                  example: in
      security: []
    delete:
      summary: 'Delete project'
      operationId: deleteProject
      description: 'Delete project.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Project does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Project does not exist'
      tags:
        - Projects
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Project identifier.'
        example: 20
        required: true
        schema:
          type: integer
  /api/projectsWithTasks:
    get:
      summary: 'Get project with assigned tasks'
      operationId: getProjectWithAssignedTasks
      description: 'Get project with assigned and opened tasks.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{[{"id": 1, "name": "Test project", "location": "Warsaw", "description": "", "owner": "john@doe.com", "created_at": "2020-01-01 10:00:00"}]}'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Project does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Project does not exist'
      tags:
        - Projects
      security: []
  /api/projects/simple:
    get:
      summary: 'Get all project list'
      operationId: getAllProjectList
      description: 'Get all project list (ex. for select)'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{[{"id": 1, "name": "Test project"}]}'
      tags:
        - Projects
      security: []
  '/api/task/{id}/comments':
    get:
      summary: 'Get task comments list'
      operationId: getTaskCommentsList
      description: 'Return task comments list.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 10
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 9
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 9
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: 1
                      comment: 'Example comment'
                      user_id: 1
                      created_at: '2020-01-01 10:00:00'
                      attachments:
                        -
                          id: 1
                          user_id: 1
                          type: task_comments
                          filename: filename.ext
                          orig_name: filename.ext
                          extension: ext
                          size: 100
                          description: 'Example description'
                          created_at: '2020-01-01 10:00:00'
                          base64: 'Base64 encode file content'
                      can_delete: true
                      user: 'John Doe'
                      _me: true
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        comment: 'Example comment'
                        user_id: 1
                        created_at: '2020-01-01 10:00:00'
                        attachments:
                          -
                            id: 1
                            user_id: 1
                            type: task_comments
                            filename: filename.ext
                            orig_name: filename.ext
                            extension: ext
                            size: 100
                            description: 'Example description'
                            created_at: '2020-01-01 10:00:00'
                            base64: 'Base64 encode file content'
                        can_delete: true
                        user: 'John Doe'
                        _me: true
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        comment:
                          type: string
                          example: 'Example comment'
                        user_id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        attachments:
                          type: array
                          example:
                            -
                              id: 1
                              user_id: 1
                              type: task_comments
                              filename: filename.ext
                              orig_name: filename.ext
                              extension: ext
                              size: 100
                              description: 'Example description'
                              created_at: '2020-01-01 10:00:00'
                              base64: 'Base64 encode file content'
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              user_id:
                                type: integer
                                example: 1
                              type:
                                type: string
                                example: task_comments
                              filename:
                                type: string
                                example: filename.ext
                              orig_name:
                                type: string
                                example: filename.ext
                              extension:
                                type: string
                                example: ext
                              size:
                                type: integer
                                example: 100
                              description:
                                type: string
                                example: 'Example description'
                              created_at:
                                type: string
                                example: '2020-01-01 10:00:00'
                              base64:
                                type: string
                                example: 'Base64 encode file content'
                        can_delete:
                          type: boolean
                          example: true
                        user:
                          type: string
                          example: 'John Doe'
                        _me:
                          type: boolean
                          example: true
      tags:
        - 'Task comments'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 13
        required: true
        schema:
          type: integer
  '/api/task/{id}/comment':
    put:
      summary: 'Create new comment'
      operationId: createNewComment
      description: 'Create new comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Task comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'Task identifier.'
                  example: 6
                comment:
                  type: string
                  description: Comment.
                  example: reprehenderit
                attachments:
                  type: array
                  description: 'of files attach to task ([{"name": "File name", "base64": Base64 encoded file, "description": "Optional file description"}])'
                  example:
                    - totam
                  items:
                    type: string
              required:
                - id
                - comment
      security: []
  '/api/task/{id}/comment/{cid}':
    get:
      summary: 'Get task comment details'
      operationId: getTaskCommentDetails
      description: 'Return task comment details.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  comment: 'Example comment'
                  user_id: '1'
                  created_at: '2020-01-01 10:00:00'
                  attachments:
                    -
                      id: 1
                      user_id: 1
                      type: task_comments
                      filename: filename.ext
                      orig_name: filename.ext
                      extension: ext
                      size: 100
                      description: 'Example description'
                      created_at: '2020-01-01 10:00:00'
                      base64: 'Base64 encode file content'
                  can_delete: true
                  user: 'John Doe'
                  _me: true
                properties:
                  id:
                    type: integer
                    example: 1
                  comment:
                    type: string
                    example: 'Example comment'
                  user_id:
                    type: string
                    example: '1'
                  created_at:
                    type: string
                    example: '2020-01-01 10:00:00'
                  attachments:
                    type: array
                    example:
                      -
                        id: 1
                        user_id: 1
                        type: task_comments
                        filename: filename.ext
                        orig_name: filename.ext
                        extension: ext
                        size: 100
                        description: 'Example description'
                        created_at: '2020-01-01 10:00:00'
                        base64: 'Base64 encode file content'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        type:
                          type: string
                          example: task_comments
                        filename:
                          type: string
                          example: filename.ext
                        orig_name:
                          type: string
                          example: filename.ext
                        extension:
                          type: string
                          example: ext
                        size:
                          type: integer
                          example: 100
                        description:
                          type: string
                          example: 'Example description'
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        base64:
                          type: string
                          example: 'Base64 encode file content'
                  can_delete:
                    type: boolean
                    example: true
                  user:
                    type: string
                    example: 'John Doe'
                  _me:
                    type: boolean
                    example: true
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Comment does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment does not exist'
      tags:
        - 'Task comments'
      security: []
    put:
      summary: 'Update comment'
      operationId: updateComment
      description: 'Update comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'Task comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'Task identifier.'
                  example: 10
                comment:
                  type: string
                  description: comment.
                  example: necessitatibus
              required:
                - id
      security: []
    delete:
      summary: 'Delete comment'
      operationId: deleteComment
      description: 'Delete comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'Task identifier.'
                  example: 20
              required:
                - id
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 3
        required: true
        schema:
          type: integer
      -
        in: path
        name: cid
        description: 'Comment identifier.'
        example: 16
        required: true
        schema:
          type: integer
  '/api/task/{id}/comment/{cid}/attachment/{aid}':
    get:
      summary: 'Get attachment from comment'
      operationId: getAttachmentFromComment
      description: 'Get attachment from comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  user_id: 1
                  type: task_comments
                  filename: filename.ext
                  orig_name: filename.ext
                  extension: ext
                  size: 100
                  description: 'Example description'
                  created_at: '2020-01-01 10:00:00'
                  base64: 'Base64 encode file content'
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  type:
                    type: string
                    example: task_comments
                  filename:
                    type: string
                    example: filename.ext
                  orig_name:
                    type: string
                    example: filename.ext
                  extension:
                    type: string
                    example: ext
                  size:
                    type: integer
                    example: 100
                  description:
                    type: string
                    example: 'Example description'
                  created_at:
                    type: string
                    example: '2020-01-01 10:00:00'
                  base64:
                    type: string
                    example: 'Base64 encode file content'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task comments'
      security: []
    delete:
      summary: 'Remove attachment from comment'
      operationId: removeAttachmentFromComment
      description: 'Remove attachment from comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task comments'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 3
        required: true
        schema:
          type: integer
      -
        in: path
        name: cid
        description: 'Comment identifier.'
        example: 5
        required: true
        schema:
          type: integer
      -
        in: path
        name: aid
        description: 'Attachment identifier.'
        example: 20
        required: true
        schema:
          type: integer
  '/api/task/{id}/comment/{cid}/attachment':
    post:
      summary: 'Add attachment to comment'
      operationId: addAttachmentToComment
      description: 'Add attachment to comment.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'File name.'
                  example: voluptatem
                file:
                  type: string
                  description: 'Base64 encode file content".'
                  example: deleniti
                description:
                  type: string
                  description: 'Description".'
                  example: 'Repellat blanditiis accusantium esse.'
              required:
                - name
                - file
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 5
        required: true
        schema:
          type: integer
      -
        in: path
        name: cid
        description: 'Comment identifier.'
        example: 18
        required: true
        schema:
          type: integer
  '/api/tasks/{id}':
    get:
      summary: 'Get tasks list'
      operationId: getTasksList
      description: 'Return tasks list assigned to project.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 20
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 4
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 4
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: '1'
                      name: 'Example task'
                      description: 'Example description'
                      project_id: 1
                      priority: 2
                      created_at: '2020-01-01 10:00:00'
                      assigned_to:
                        - 1
                        - 2
                      attachments:
                        -
                          id: 1
                          user_id: 1
                          type: tasks
                          filename: filename.ext
                          orig_name: filename.ext
                          extension: ext
                          size: 100
                          description: 'Example description'
                          created_at: '2020-01-01 10:00:00'
                          base64: 'Base64 encode file content'
                      timer:
                        state: active
                        total: 250
                        total_logged: 1000
                  project_name: 'Project name'
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: '1'
                        name: 'Example task'
                        description: 'Example description'
                        project_id: 1
                        priority: 2
                        created_at: '2020-01-01 10:00:00'
                        assigned_to:
                          - 1
                          - 2
                        attachments:
                          -
                            id: 1
                            user_id: 1
                            type: tasks
                            filename: filename.ext
                            orig_name: filename.ext
                            extension: ext
                            size: 100
                            description: 'Example description'
                            created_at: '2020-01-01 10:00:00'
                            base64: 'Base64 encode file content'
                        timer:
                          state: active
                          total: 250
                          total_logged: 1000
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: '1'
                        name:
                          type: string
                          example: 'Example task'
                        description:
                          type: string
                          example: 'Example description'
                        project_id:
                          type: integer
                          example: 1
                        priority:
                          type: integer
                          example: 2
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        assigned_to:
                          type: array
                          example:
                            - 1
                            - 2
                          items:
                            type: integer
                        attachments:
                          type: array
                          example:
                            -
                              id: 1
                              user_id: 1
                              type: tasks
                              filename: filename.ext
                              orig_name: filename.ext
                              extension: ext
                              size: 100
                              description: 'Example description'
                              created_at: '2020-01-01 10:00:00'
                              base64: 'Base64 encode file content'
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              user_id:
                                type: integer
                                example: 1
                              type:
                                type: string
                                example: tasks
                              filename:
                                type: string
                                example: filename.ext
                              orig_name:
                                type: string
                                example: filename.ext
                              extension:
                                type: string
                                example: ext
                              size:
                                type: integer
                                example: 100
                              description:
                                type: string
                                example: 'Example description'
                              created_at:
                                type: string
                                example: '2020-01-01 10:00:00'
                              base64:
                                type: string
                                example: 'Base64 encode file content'
                        timer:
                          type: object
                          properties:
                            state:
                              type: string
                              example: active
                            total:
                              type: integer
                              example: 250
                            total_logged:
                              type: integer
                              example: 1000
                  project_name:
                    type: string
                    example: 'Project name'
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Project identifier.'
        example: 1
        required: true
        schema:
          type: integer
  /api/task:
    put:
      summary: 'Create new task'
      operationId: createNewTask
      description: 'Create new task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: 'Project identifier.'
                  example: 1
                name:
                  type: string
                  description: 'Task name.'
                  example: sint
                description:
                  type: string
                  description: 'Task description.'
                  example: 'Et nihil reprehenderit dolores harum.'
                users:
                  type: array
                  description: 'Array of users identifier assigned to task.'
                  example:
                    - et
                  items:
                    type: string
                attachments:
                  type: array
                  description: 'Array of files attach to task ([{"name": "File name", "base64": Base64 encoded file, "description": "Optional file description"}])'
                  example:
                    - et
                  items:
                    type: string
              required:
                - project_id
                - name
      security: []
  '/api/task/{id}':
    get:
      summary: 'Get task details'
      operationId: getTaskDetails
      description: 'Return task details.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Example task'
                  description: 'Example description'
                  project_id: 1
                  priority: 2
                  created_at: '2020-01-01 10:00:00'
                  assigned_to:
                    - 1
                    - 2
                  attachments:
                    -
                      id: 1
                      user_id: 1
                      type: tasks
                      filename: filename.ext
                      orig_name: filename.ext
                      extension: ext
                      size: 100
                      description: 'Example description'
                      created_at: '2020-01-01 10:00:00'
                      base64: 'Base64 encode file content'
                  timer:
                    state: active
                    total: 250
                    total_logged: 1000
                  project_name: 'Project name'
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Example task'
                  description:
                    type: string
                    example: 'Example description'
                  project_id:
                    type: integer
                    example: 1
                  priority:
                    type: integer
                    example: 2
                  created_at:
                    type: string
                    example: '2020-01-01 10:00:00'
                  assigned_to:
                    type: array
                    example:
                      - 1
                      - 2
                    items:
                      type: integer
                  attachments:
                    type: array
                    example:
                      -
                        id: 1
                        user_id: 1
                        type: tasks
                        filename: filename.ext
                        orig_name: filename.ext
                        extension: ext
                        size: 100
                        description: 'Example description'
                        created_at: '2020-01-01 10:00:00'
                        base64: 'Base64 encode file content'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        type:
                          type: string
                          example: tasks
                        filename:
                          type: string
                          example: filename.ext
                        orig_name:
                          type: string
                          example: filename.ext
                        extension:
                          type: string
                          example: ext
                        size:
                          type: integer
                          example: 100
                        description:
                          type: string
                          example: 'Example description'
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        base64:
                          type: string
                          example: 'Base64 encode file content'
                  timer:
                    type: object
                    properties:
                      state:
                        type: string
                        example: active
                      total:
                        type: integer
                        example: 250
                      total_logged:
                        type: integer
                        example: 1000
                  project_name:
                    type: string
                    example: 'Project name'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      security: []
    put:
      summary: 'Update task'
      operationId: updateTask
      description: 'Update task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Tasks
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Task name.'
                  example: qui
                description:
                  type: string
                  description: 'Task description.'
                  example: 'Aut eligendi non non culpa qui exercitationem.'
                users:
                  type: integer
                  description: 'Array of users identifier assigned to task.'
                  example: 14
      security: []
    delete:
      summary: 'Delete task'
      operationId: deleteTask
      description: 'Delete task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 9
        required: true
        schema:
          type: integer
  '/api/task/{id}/assign':
    post:
      summary: 'Assign user to task'
      operationId: assignUserToTask
      description: 'Assign user to task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'User identifier.'
                  example: 16
              required:
                - user_id
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/task/{id}/deassign':
    post:
      summary: 'Deassign user from task'
      operationId: deassignUserFromTask
      description: 'Deassign user from task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'User identifier.'
                  example: 20
              required:
                - user_id
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 5
        required: true
        schema:
          type: integer
  '/api/task/{id}/attachment/{aid}':
    get:
      summary: 'Get attachment from task'
      operationId: getAttachmentFromTask
      description: 'Get attachment from task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  user_id: 1
                  type: tasks
                  filename: filename.ext
                  orig_name: filename.ext
                  extension: ext
                  size: 100
                  description: 'Example description'
                  created_at: '2020-01-01 10:00:00'
                  base64: 'Base64 encode file content'
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  type:
                    type: string
                    example: tasks
                  filename:
                    type: string
                    example: filename.ext
                  orig_name:
                    type: string
                    example: filename.ext
                  extension:
                    type: string
                    example: ext
                  size:
                    type: integer
                    example: 100
                  description:
                    type: string
                    example: 'Example description'
                  created_at:
                    type: string
                    example: '2020-01-01 10:00:00'
                  base64:
                    type: string
                    example: 'Base64 encode file content'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      security: []
    delete:
      summary: 'Remove attachment from task'
      operationId: removeAttachmentFromTask
      description: 'Remove attachment from task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 10
        required: true
        schema:
          type: integer
      -
        in: path
        name: aid
        description: 'Attachment identifier.'
        example: 15
        required: true
        schema:
          type: integer
  '/api/task/{id}/attachment':
    post:
      summary: 'Add attachment to task'
      operationId: addAttachmentToTask
      description: 'Add attachment to task.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'File name.'
                  example: sint
                base64:
                  type: string
                  description: 'Base64 encode file content".'
                  example: neque
                description:
                  type: string
                  description: 'Description".'
                  example: 'Laudantium nihil architecto doloremque voluptas.'
              required:
                - name
                - base64
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/task/users/{id}':
    get:
      summary: 'Get task allowed users'
      operationId: getTaskAllowedUsers
      description: 'Get task allowed users ready to assigned.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 2
                    firstname: John
                    lastname: Doe
                    email: john.doe@gmail.com
                    _me: true
                    _allowed: true
                    _check: false
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. optional Task identifier.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 9
  '/api/task/{id}/close':
    post:
      summary: 'Close task'
      operationId: closeTask
      description: 'Set task as closed.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. optional Task identifier.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 15
  '/api/task/{id}/open':
    post:
      summary: 'Close task'
      operationId: closeTask
      description: 'Set task as opened.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - Tasks
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. optional Task identifier.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 19
  /api/tasks/my-work:
    get:
      summary: 'My work'
      operationId: myWork
      description: 'Get logged user opened and assigned tasks.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: '1'
                      name: 'Example task'
                      description: 'Example description'
                      project_id: 1
                      priority: 2
                      created_at: '2020-01-01 10:00:00'
                      assigned_to:
                        - 1
                        - 2
                      attachments:
                        -
                          id: 1
                          user_id: 1
                          type: tasks
                          filename: filename.ext
                          orig_name: filename.ext
                          extension: ext
                          size: 100
                          description: 'Example description'
                          created_at: '2020-01-01 10:00:00'
                          base64: 'Base64 encode file content'
                      timer:
                        state: active
                        total: 250
                        total_logged: 1000
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: '1'
                        name: 'Example task'
                        description: 'Example description'
                        project_id: 1
                        priority: 2
                        created_at: '2020-01-01 10:00:00'
                        assigned_to:
                          - 1
                          - 2
                        attachments:
                          -
                            id: 1
                            user_id: 1
                            type: tasks
                            filename: filename.ext
                            orig_name: filename.ext
                            extension: ext
                            size: 100
                            description: 'Example description'
                            created_at: '2020-01-01 10:00:00'
                            base64: 'Base64 encode file content'
                        timer:
                          state: active
                          total: 250
                          total_logged: 1000
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: '1'
                        name:
                          type: string
                          example: 'Example task'
                        description:
                          type: string
                          example: 'Example description'
                        project_id:
                          type: integer
                          example: 1
                        priority:
                          type: integer
                          example: 2
                        created_at:
                          type: string
                          example: '2020-01-01 10:00:00'
                        assigned_to:
                          type: array
                          example:
                            - 1
                            - 2
                          items:
                            type: integer
                        attachments:
                          type: array
                          example:
                            -
                              id: 1
                              user_id: 1
                              type: tasks
                              filename: filename.ext
                              orig_name: filename.ext
                              extension: ext
                              size: 100
                              description: 'Example description'
                              created_at: '2020-01-01 10:00:00'
                              base64: 'Base64 encode file content'
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              user_id:
                                type: integer
                                example: 1
                              type:
                                type: string
                                example: tasks
                              filename:
                                type: string
                                example: filename.ext
                              orig_name:
                                type: string
                                example: filename.ext
                              extension:
                                type: string
                                example: ext
                              size:
                                type: integer
                                example: 100
                              description:
                                type: string
                                example: 'Example description'
                              created_at:
                                type: string
                                example: '2020-01-01 10:00:00'
                              base64:
                                type: string
                                example: 'Base64 encode file content'
                        timer:
                          type: object
                          properties:
                            state:
                              type: string
                              example: active
                            total:
                              type: integer
                              example: 250
                            total_logged:
                              type: integer
                              example: 1000
      tags:
        - Tasks
      security: []
  '/api/task/{id}/time':
    get:
      summary: 'Return total logged time'
      operationId: returnTotalLoggedTime
      description: 'Return total logged time'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - Tasks
      security: []
    put:
      summary: 'Log task spend time'
      operationId: logTaskSpendTime
      description: 'Log task spend time.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                started:
                  type: integer
                  description: 'Start time.'
                  example: 3
                total:
                  type: integer
                  description: 'Total time in seconds.'
                  example: 7
                comment:
                  type: string
                  description: Comment.
                  example: dolorem
                billable:
                  type: boolean
                  description: Billable.
                  example: true
              required:
                - started
                - total
      security: []
  '/api/task/{id}/time/start':
    post:
      summary: 'Start task timer'
      operationId: startTaskTimer
      description: 'Start task timer (log time).'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 8
        required: true
        schema:
          type: integer
  '/api/task/{id}/time/stop':
    post:
      summary: 'Stop task timer'
      operationId: stopTaskTimer
      description: 'Stop task timer (log time).'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  state: active
                  total: 250
                  total_logged: 1000
                properties:
                  state:
                    type: string
                    example: active
                  total:
                    type: integer
                    example: 250
                  total_logged:
                    type: integer
                    example: 1000
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 4
        required: true
        schema:
          type: integer
  '/api/task/{id}/time/pause':
    post:
      summary: 'Pause task timer'
      operationId: pauseTaskTimer
      description: 'Pause task timer (log time).'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  state: active
                  total: 250
                  total_logged: 1000
                properties:
                  state:
                    type: string
                    example: active
                  total:
                    type: integer
                    example: 250
                  total_logged:
                    type: integer
                    example: 1000
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 18
        required: true
        schema:
          type: integer
  '/api/task/{id}/time/{tid}':
    put:
      summary: 'Update log task spend time'
      operationId: updateLogTaskSpendTime
      description: 'Update log task spend time.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                started:
                  type: integer
                  description: 'Start time.'
                  example: 5
                total:
                  type: integer
                  description: 'Total time in seconds.'
                  example: 10
                comment:
                  type: string
                  description: Comment.
                  example: voluptates
                billable:
                  type: boolean
                  description: Billable.
                  example: false
      security: []
    delete:
      summary: 'Delete task log time'
      operationId: deleteTaskLogTime
      description: 'Delete task log time.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    get:
      summary: 'Get task spend time row'
      operationId: getTaskSpendTimeRow
      description: 'Get task spend time row.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  status: active
                  task_id: '1'
                  user_id: 1
                  started: '1680843163'
                  finished: 1680843163
                  timer_started: 0
                  total: 600
                  comment: 'Example comment'
                  billable: 0
                  _me: true
                  user: 'John Doe'
                properties:
                  id:
                    type: integer
                    example: 1
                  status:
                    type: string
                    example: active
                  task_id:
                    type: string
                    example: '1'
                  user_id:
                    type: integer
                    example: 1
                  started:
                    type: string
                    example: '1680843163'
                  finished:
                    type: integer
                    example: 1680843163
                  timer_started:
                    type: integer
                    example: 0
                  total:
                    type: integer
                    example: 600
                  comment:
                    type: string
                    example: 'Example comment'
                  billable:
                    type: integer
                    example: 0
                  _me:
                    type: boolean
                    example: true
                  user:
                    type: string
                    example: 'John Doe'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 17
        required: true
        schema:
          type: integer
      -
        in: path
        name: tid
        description: 'Task time identifier.'
        example: 3
        required: true
        schema:
          type: integer
  '/api/task/{id}/times':
    get:
      summary: 'Get task spend time rows'
      operationId: getTaskSpendTimeRows
      description: 'Get task spend time rows.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 6
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 6
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 5
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 5
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: 1
                      status: active
                      task_id: '1'
                      user_id: 1
                      started: '1680843163'
                      finished: 1680843163
                      timer_started: 0
                      total: 600
                      comment: 'Example comment'
                      billable: 0
                      _me: true
                      user: 'John Doe'
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        status: active
                        task_id: '1'
                        user_id: 1
                        started: '1680843163'
                        finished: 1680843163
                        timer_started: 0
                        total: 600
                        comment: 'Example comment'
                        billable: 0
                        _me: true
                        user: 'John Doe'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        status:
                          type: string
                          example: active
                        task_id:
                          type: string
                          example: '1'
                        user_id:
                          type: integer
                          example: 1
                        started:
                          type: string
                          example: '1680843163'
                        finished:
                          type: integer
                          example: 1680843163
                        timer_started:
                          type: integer
                          example: 0
                        total:
                          type: integer
                          example: 600
                        comment:
                          type: string
                          example: 'Example comment'
                        billable:
                          type: integer
                          example: 0
                        _me:
                          type: boolean
                          example: true
                        user:
                          type: string
                          example: 'John Doe'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Task does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task does not exist'
      tags:
        - 'Task time'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Task identifier.'
        example: 19
        required: true
        schema:
          type: integer
  /api/users:
    get:
      summary: 'Get users list'
      operationId: getUsersList
      description: 'Return users account list.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 5
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 5
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 16
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 16
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: 1
                      firstname: John
                      lastname: Doe
                      phone: 123456789
                      email: john@doe.com
                      activated: 1
                      owner: 0
                      superuser: 0
                      can_delete: 1
                      user_permission_id: 1
                      user_permission_name: 'Permission name'
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        firstname: John
                        lastname: Doe
                        phone: 123456789
                        email: john@doe.com
                        activated: 1
                        owner: 0
                        superuser: 0
                        can_delete: 1
                        user_permission_id: 1
                        user_permission_name: 'Permission name'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        firstname:
                          type: string
                          example: John
                        lastname:
                          type: string
                          example: Doe
                        phone:
                          type: integer
                          example: 123456789
                        email:
                          type: string
                          example: john@doe.com
                        activated:
                          type: integer
                          example: 1
                        owner:
                          type: integer
                          example: 0
                        superuser:
                          type: integer
                          example: 0
                        can_delete:
                          type: integer
                          example: 1
                        user_permission_id:
                          type: integer
                          example: 1
                        user_permission_name:
                          type: string
                          example: 'Permission name'
      tags:
        - 'User management'
      security: []
  /api/user:
    put:
      summary: 'Create user account'
      operationId: createUserAccount
      description: 'Create user account. After create account is ready to use.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        409:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The given e-mail address is already registered'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The given e-mail address is already registered'
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: 'User first name.'
                  example: enim
                lastname:
                  type: string
                  description: 'User last name.'
                  example: tenetur
                email:
                  type: string
                  description: 'User e-mail address.'
                  example: easton65@example.com
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: '5JKt\_S0(*`'
                phone:
                  type: string
                  description: 'User phone number.'
                  example: quidem
                user_permission_id:
                  type: integer
                  description: 'Permission group identifier (if not set default permission will be used).'
                  example: 20
                superuser:
                  type: boolean
                  description: 'If set true user have full access regardless of permissions.'
                  example: true
              required:
                - firstname
                - lastname
                - email
                - password
      security: []
  /api/invite:
    post:
      summary: 'Invite user'
      operationId: inviteUser
      description: 'Send invitation to the email address provided.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        409:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The given e-mail address is already registered'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The given e-mail address is already registered'
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'User e-mail address.'
                  example: ezekiel.schaefer@example.org
                user_permission_id:
                  type: integer
                  description: 'Permission group identifier (if not set default permission will be used).'
                  example: 8
              required:
                - email
      security: []
  '/api/user/{id}':
    get:
      summary: 'Get user account data'
      operationId: getUserAccountData
      description: 'Return user account data.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  firstname: John
                  lastname: Doe
                  phone: 123456789
                  email: john@doe.com
                  activated: 1
                  owner: 0
                  superuser: 0
                  can_delete: 1
                  user_permission_id: 1
                  user_permission_name: 'Permission name'
                properties:
                  id:
                    type: integer
                    example: 1
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  phone:
                    type: integer
                    example: 123456789
                  email:
                    type: string
                    example: john@doe.com
                  activated:
                    type: integer
                    example: 1
                  owner:
                    type: integer
                    example: 0
                  superuser:
                    type: integer
                    example: 0
                  can_delete:
                    type: integer
                    example: 1
                  user_permission_id:
                    type: integer
                    example: 1
                  user_permission_name:
                    type: string
                    example: 'Permission name'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'User does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User does not exist'
      tags:
        - 'User management'
      security: []
    put:
      summary: 'Update user account data'
      operationId: updateUserAccountData
      description: 'Update user account data.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: 'User first name.'
                  example: incidunt
                lastname:
                  type: string
                  description: 'User last name.'
                  example: vel
                email:
                  type: string
                  description: 'User e-mail address.'
                  example: towne.hortense@example.org
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: F0y>nIZJP1
                phone:
                  type: string
                  description: 'User phone number.'
                  example: et
                user_permission_id:
                  type: integer
                  description: 'Permission group identifier.'
                  example: 16
                superuser:
                  type: boolean
                  description: 'If set true user have full access regardless of permissions.'
                  example: true
      security: []
    delete:
      summary: 'Delete user account'
      operationId: deleteUserAccount
      description: 'Delete user account.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'User does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User does not exist'
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'User identifier.'
        example: 18
        required: true
        schema:
          type: integer
  /api/user/permission:
    get:
      summary: 'Get logged user permissions'
      operationId: getLoggedUserPermissions
      description: 'Get logged user permissions'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  permission:
                    project:
                      - list
                      - create
                      - update
                      - delete
                    task:
                      - list
                      - create
                      - update
                      - delete
                    user:
                      - list
                      - create
                      - update
                      - delete
                    permission:
                      - list
                      - create
                      - update
                      - delete
                properties:
                  permission:
                    type: object
                    properties:
                      project:
                        type: array
                        example:
                          - list
                          - create
                          - update
                          - delete
                        items:
                          type: string
                      task:
                        type: array
                        example:
                          - list
                          - create
                          - update
                          - delete
                        items:
                          type: string
                      user:
                        type: array
                        example:
                          - list
                          - create
                          - update
                          - delete
                        items:
                          type: string
                      permission:
                        type: array
                        example:
                          - list
                          - create
                          - update
                          - delete
                        items:
                          type: string
      tags:
        - 'User management'
      security: []
  /api/profile:
    get:
      summary: 'User profile'
      operationId: userProfile
      description: 'User profile.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  firstname: John
                  lastname: Doe
                  phone: 123456789
                  email: john@doe.com
                  activated: 1
                  owner: 0
                  superuser: 0
                  user_permission_id: 1
                  user_permission_name: 'Permission name'
                properties:
                  id:
                    type: integer
                    example: 1
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  phone:
                    type: integer
                    example: 123456789
                  email:
                    type: string
                    example: john@doe.com
                  activated:
                    type: integer
                    example: 1
                  owner:
                    type: integer
                    example: 0
                  superuser:
                    type: integer
                    example: 0
                  user_permission_id:
                    type: integer
                    example: 1
                  user_permission_name:
                    type: string
                    example: 'Permission name'
      tags:
        - 'User management'
      security: []
    put:
      summary: 'Update user profile'
      operationId: updateUserProfile
      description: 'User profile.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: 'User first name.'
                  example: rerum
                lastname:
                  type: string
                  description: 'User last name.'
                  example: accusantium
                email:
                  type: string
                  description: 'User e-mail address.'
                  example: pritchie@example.net
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: '@eNKT~9c'
                phone:
                  type: string
                  description: 'User phone number.'
                  example: impedit
      security: []
  /api/settings:
    get:
      summary: 'User settings'
      operationId: userSettings
      description: 'User settings.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  locale: pl
                properties:
                  locale:
                    type: string
                    example: pl
      tags:
        - 'User management'
      security: []
    put:
      summary: 'Update user settings'
      operationId: updateUserSettings
      description: 'User settings.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                flocale:
                  type: string
                  description: 'Locale ex. pl.'
                  example: fur_IT
      security: []
  /api/get-firm-id:
    get:
      summary: 'Get login user firm identifier'
      operationId: getLoginUserFirmIdentifier
      description: 'Get login user firm identifier.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      security: []
  /api/get-id:
    get:
      summary: 'Get login user identifier'
      operationId: getLoginUserIdentifier
      description: 'Get login user identifier.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User management'
      security: []
  '/api/invite/{token}':
    get:
      summary: 'Validate invite token'
      operationId: validateInviteToken
      description: 'Check validate invite token.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{'email': 'john@doe.com'}"
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The given token is invalid'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The given token is invalid'
      tags:
        - 'User management'
      security: []
    put:
      summary: 'Confirm invitation'
      operationId: confirmInvitation
      description: 'Confirm invitation and create new user account.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The given token is invalid'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The given token is invalid'
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: 'User first name.'
                  example: architecto
                lastname:
                  type: string
                  description: 'User last name.'
                  example: voluptatum
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: '!VDT7:T:0]7c^BVdo].'
                phone:
                  type: string
                  description: 'User phone number.'
                  example: voluptates
              required:
                - firstname
                - lastname
                - password
      security: []
    parameters:
      -
        in: path
        name: token
        description: 'Invite token from invitation message.'
        example: et
        required: true
        schema:
          type: string
  /api/permissions:
    get:
      summary: 'Get permissions group list'
      operationId: getPermissionsGroupList
      description: 'Return permissions list.'
      parameters:
        -
          in: query
          name: size
          description: 'Number of rows. Default: 50'
          example: 2
          required: false
          schema:
            type: integer
            description: 'Number of rows. Default: 50'
            example: 2
        -
          in: query
          name: page
          description: 'Number of page (pagination). Default: 1'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Number of page (pagination). Default: 1'
            example: 10
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  total_rows: 100
                  total_pages: '4'
                  current_page: 1
                  has_more: true
                  data:
                    -
                      id: 1
                      name: 'Example group name'
                      permissions:
                        -
                          name: 'module name'
                          perm:
                            - list
                            - create
                      is_default: 0
                      can_delete: 1
                properties:
                  total_rows:
                    type: integer
                    example: 100
                  total_pages:
                    type: string
                    example: '4'
                  current_page:
                    type: integer
                    example: 1
                  has_more:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Example group name'
                        permissions:
                          -
                            name: 'module name'
                            perm:
                              - list
                              - create
                        is_default: 0
                        can_delete: 1
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Example group name'
                        permissions:
                          type: array
                          example:
                            -
                              name: 'module name'
                              perm:
                                - list
                                - create
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                example: 'module name'
                              perm:
                                type: array
                                example:
                                  - list
                                  - create
                                items:
                                  type: string
                        is_default:
                          type: integer
                          example: 0
                        can_delete:
                          type: integer
                          example: 1
      tags:
        - 'User permissions'
      security: []
  /api/permission:
    put:
      summary: 'Create new persmission group'
      operationId: createNewPersmissionGroup
      description: "Create new persmission group. Permissions should look like this:\nprojects:list,create,update,delete;users:list"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: "'projects:' does not contain a list of items."
                  errors:
                    permissions:
                      - "'projects:' does not contain a list of items."
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "'projects:' does not contain a list of items."
                  errors:
                    type: object
                    properties:
                      permissions:
                        type: array
                        example:
                          - "'projects:' does not contain a list of items."
                        items:
                          type: string
      tags:
        - 'User permissions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Group permission name.'
                  example: deleniti
                permissions:
                  type: string
                  description: Permission.
                  example: molestias
                is_default:
                  type: boolean
                  description: 'Set permission default.'
                  example: false
              required:
                - name
                - permissions
      security: []
  '/api/permission/{id}':
    get:
      summary: 'Get persmission group details'
      operationId: getPersmissionGroupDetails
      description: 'Get persmission group details.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: 'Example group name'
                  permissions:
                    module:
                      - list
                      - create
                  is_default: 0
                  can_delete: 1
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 'Example group name'
                  permissions:
                    type: object
                    properties:
                      module:
                        type: array
                        example:
                          - list
                          - create
                        items:
                          type: string
                  is_default:
                    type: integer
                    example: 0
                  can_delete:
                    type: integer
                    example: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Permission does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Permission does not exist'
      tags:
        - 'User permissions'
      security: []
    put:
      summary: 'Update persmission group'
      operationId: updatePersmissionGroup
      description: 'Update persmission group.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses: {  }
      tags:
        - 'User permissions'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Group permission name.'
                  example: quia
                permissions:
                  type: string
                  description: Permission.
                  example: veritatis
                is_default:
                  type: boolean
                  description: 'Set permission default.'
                  example: false
      security: []
    delete:
      summary: 'Delete persmission group'
      operationId: deletePersmissionGroup
      description: 'Delete persmission group.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Permission does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Permission does not exist'
      tags:
        - 'User permissions'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Permission group identifier.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/permission/{id}/add':
    put:
      summary: 'Add permission to persmission group'
      operationId: addPermissionToPersmissionGroup
      description: 'Add permission to persmission group.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Permission does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Permission does not exist'
      tags:
        - 'User permissions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: string
                  description: 'Object name.'
                  example: ducimus
                action:
                  type: string
                  description: 'Action name (if not set, allow all actions).'
                  example: illum
              required:
                - object
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Permission group identifier.'
        example: 16
        required: true
        schema:
          type: integer
  '/api/permission/{id}/del':
    delete:
      summary: 'Delete permission from persmission group'
      operationId: deletePermissionFromPersmissionGroup
      description: 'Delete permission from persmission group.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Permission does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Permission does not exist'
      tags:
        - 'User permissions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: string
                  description: 'Object name.'
                  example: sed
                action:
                  type: string
                  description: 'Action name (if not set, allow all actions).'
                  example: cumque
              required:
                - object
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Permission group identifier.'
        example: 19
        required: true
        schema:
          type: integer
  /api/permission/modules:
    get:
      summary: 'Return permission modules'
      operationId: returnPermissionModules
      description: 'Return permission modules'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: 'Authorization:'
          description: ''
          example: 'Bearer {TOKEN}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  permissions:
                    -
                      name: 'module name'
                      perm:
                        - list
                        - create
                properties:
                  permissions:
                    type: array
                    example:
                      -
                        name: 'module name'
                        perm:
                          - list
                          - create
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: 'module name'
                        perm:
                          type: array
                          example:
                            - list
                            - create
                          items:
                            type: string
      tags:
        - 'User permissions'
      security: []
  /api/logout:
    get:
      summary: Logout
      operationId: logout
      description: Logout.
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'User registation'
      security: []
  /api/register:
    post:
      summary: 'Register new account'
      operationId: registerNewAccount
      description: 'Create new user account. After registration, a confirmation link is sent to the provided e-mail address.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: boolean
                example: true
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The provided email is already registered.'
                  errors:
                    email:
                      - 'The provided email is already registered.'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The provided email is already registered.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The provided email is already registered.'
                        items:
                          type: string
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email address.'
                  example: john@doe.com
                source:
                  type: string
                  description: 'Register source. One of: app/www'
                  example: rerum
              required:
                - email
      security: []
  '/api/register/confirm/{token}':
    get:
      summary: 'Validate register token'
      operationId: validateRegisterToken
      description: 'Check validate register token from confirmation message.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{'email': 'john@doe.com'}"
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The provided email is already registered.'
                  errors:
                    email:
                      - 'The provided email is already registered.'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The provided email is already registered.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The provided email is already registered.'
                        items:
                          type: string
      tags:
        - 'User registation'
      security: []
    post:
      summary: 'Confirm register'
      operationId: confirmRegister
      description: 'Confirm register and finish registration.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'Invalid register token.'
                  errors:
                    token:
                      - 'Invalid register token.'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Invalid register token.'
                  errors:
                    type: object
                    properties:
                      token:
                        type: array
                        example:
                          - 'Invalid register token.'
                        items:
                          type: string
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: 'User first name.'
                  example: ab
                lastname:
                  type: string
                  description: 'User last name.'
                  example: autem
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: 'tuOAN()Ruj+[U,'
                firm_identifier:
                  type: string
                  description: 'User firm name.'
                  example: dolore
                phone:
                  type: string
                  description: 'User phone number.'
                  example: nisi
              required:
                - firstname
                - lastname
                - password
                - firm_identifier
                - phone
      security: []
    parameters:
      -
        in: path
        name: token
        description: 'Register token.'
        example: ullam
        required: true
        schema:
          type: string
  /api/login:
    post:
      summary: 'Get token'
      operationId: getToken
      description: 'Return auth bearer Token.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'The provided credentials are incorrect.'
                  errors:
                    email:
                      - 'The provided credentials are incorrect.'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'The provided credentials are incorrect.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The provided credentials are incorrect.'
                        items:
                          type: string
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Account e-mail address'
                  example: yolanda.emard@example.com
                password:
                  type: string
                  description: 'Account password'
                  example: '5AzbH9v$H"=*'
                device_name:
                  type: string
                  description: 'Device name'
                  example: ipsa
                firm_id:
                  type: integer
                  description: 'Firm identifier (required if e-mail address is register on two or more firms)'
                  example: 6
              required:
                - email
                - password
                - device_name
      security: []
  /api/forgot-password:
    post:
      summary: 'Forgot password'
      operationId: forgotPassword
      description: 'Send password reset link'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'User does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User does not exist'
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Account e-mail address'
                  example: loyce.abshire@example.net
                firm_id:
                  type: integer
                  description: 'Firm identifier (if e-mail address exist in more than once firms)'
                  example: 15
              required:
                - email
      security: []
  /api/reset-password:
    get:
      summary: 'Validate token reset password'
      operationId: validateTokenResetPassword
      description: 'Validate token reset password'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'forgot password token'
                  example: ut
                email:
                  type: string
                  description: 'Account e-mail address'
                  example: omckenzie@example.org
              required:
                - token
                - email
      security: []
    post:
      summary: 'Reset password'
      operationId: resetPassword
      description: 'Send password reset link'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'User registation'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'forgot password token'
                  example: error
                email:
                  type: string
                  description: 'Account e-mail address'
                  example: block.nels@example.net
                password:
                  type: string
                  description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
                  example: 'w,@9b?\?^=Ke'
              required:
                - token
                - email
                - password
      security: []
  /api/get-email-firm-ids:
    get:
      summary: 'Get email firm ids'
      operationId: getEmailFirmIds
      description: "Get user email assigned firm identifiers\nBecause e-mail addresses may be repeated within other companies, if the e-mail address exists more than once,\nyou must enter the company ID when logging in / remembering the password."
      parameters:
        -
          in: query
          name: email
          description: 'Account e-mail address'
          example: parisian.alexandra@example.net
          required: true
          schema:
            type: string
            description: 'Account e-mail address'
            example: parisian.alexandra@example.net
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 1
                    name: 'Example Firm'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: true
                  message: 'User does not exist'
                properties:
                  error:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User does not exist'
      tags:
        - 'User registation'
      security: []
tags:
  -
    name: Projects
    description: ''
  -
    name: 'Task comments'
    description: ''
  -
    name: Tasks
    description: ''
  -
    name: 'Task time'
    description: ''
  -
    name: 'User management'
    description: ''
  -
    name: 'User permissions'
    description: ''
  -
    name: 'User registation'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
