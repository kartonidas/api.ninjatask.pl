## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Task comments'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/task/{id}/comments'
    metadata:
      groupName: 'Task comments'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get task comments list'
      description: 'Return task comments list.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 19
        type: integer
        custom: []
    cleanUrlParameters:
      id: 19
    queryParameters:
      size:
        name: size
        description: 'Number of rows. Default: 50'
        required: false
        example: 16
        type: integer
        custom: []
      page:
        name: page
        description: 'Number of page (pagination). Default: 1'
        required: false
        example: 15
        type: integer
        custom: []
    cleanQueryParameters:
      size: 16
      page: 15
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id": 1, "comment": "Example comment", "user_id": 1, "created_at" => "2020-01-01 10:00:00"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/task/{id}/comment'
    metadata:
      groupName: 'Task comments'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new comment'
      description: 'Create new comment.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 20
        type: integer
        custom: []
      comment:
        name: comment
        description: Comment.
        required: true
        example: qui
        type: string
        custom: []
    cleanBodyParameters:
      id: 20
      comment: qui
    fileParameters: []
    responses: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created comment'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/task/{id}/comment/{cid}'
    metadata:
      groupName: 'Task comments'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get task comment details'
      description: 'Return task comment details.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 17
        type: integer
        custom: []
      cid:
        name: cid
        description: 'Comment identifier.'
        required: true
        example: 17
        type: integer
        custom: []
    cleanUrlParameters:
      id: 17
      cid: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "comment": "Example comment", "user_id": "1", "created_at" => "2020-01-01 10:00:00"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"Comment does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/task/{id}/comment/{cid}'
    metadata:
      groupName: 'Task comments'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update comment'
      description: 'Update comment.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      cid:
        name: cid
        description: 'Comment identifier.'
        required: true
        example: 11
        type: integer
        custom: []
    cleanUrlParameters:
      cid: 11
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 8
        type: integer
        custom: []
      comment:
        name: comment
        description: comment.
        required: false
        example: nam
        type: string
        custom: []
    cleanBodyParameters:
      id: 8
      comment: nam
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/task/{id}/comment/{cid}'
    metadata:
      groupName: 'Task comments'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete comment'
      description: 'Delete comment.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      cid:
        name: cid
        description: 'Comment identifier.'
        required: true
        example: 20
        type: integer
        custom: []
    cleanUrlParameters:
      cid: 20
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 19
        type: integer
        custom: []
    cleanBodyParameters:
      id: 19
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
