## Autogenerated by Scribe. DO NOT MODIFY.

name: Tasks
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/tasks/{id}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get tasks list'
      description: 'Return tasks list assigned to project.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Project identifier.'
        required: true
        example: 13
        type: integer
        custom: []
    cleanUrlParameters:
      id: 13
    queryParameters:
      size:
        name: size
        description: 'Number of rows. Default: 50'
        required: false
        example: 19
        type: integer
        custom: []
      page:
        name: page
        description: 'Number of page (pagination). Default: 1'
        required: false
        example: 19
        type: integer
        custom: []
      query:
        name: query
        description: 'Search task by name Default: "task name"'
        required: false
        example: consectetur
        type: string
        custom: []
      users:
        name: users
        description: 'Search task by assigned usrs. Default: [2]'
        required: false
        example: 12
        type: integer
        custom: []
      status:
        name: status
        description: 'Search task by task status identifier. Default: 1'
        required: false
        example: 4
        type: integer
        custom: []
      priority:
        name: priority
        description: 'Search task by task priority. Default: 1'
        required: false
        example: 9
        type: integer
        custom: []
      state:
        name: state
        description: 'Search task by task state (one of: opened, closed). Default: opened'
        required: false
        example: ut
        type: string
        custom: []
    cleanQueryParameters:
      size: 19
      page: 19
      query: consectetur
      users: 12
      status: 4
      priority: 9
      state: ut
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id": "1", "name": "Example task", "description": "Example description", "project_id": 1, "priority" : 2, "status_id": 2, "status": "To do", "created_at": "2020-01-01 10:00:00", "assigned_to": [1,2], "attachments": [{"id": 1, "user_id": 1, "type": "tasks", "filename": "filename.ext", "orig_name": "filename.ext", "extension": "ext", "size": 100, "description": "Example description", "created_at": "2020-01-01 10:00:00", "base64": "Base64 encode file content"}], "timer": {"state": "active", "total": 250, "total_logged": 1000}, "completed": 1, "status": "Done"}], "project_name": "Project name"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/task
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new task'
      description: 'Create new task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      project_id:
        name: project_id
        description: 'Project identifier.'
        required: true
        example: 19
        type: integer
        custom: []
      status_id:
        name: status_id
        description: 'Status identifier.'
        required: false
        example: 19
        type: integer
        custom: []
      name:
        name: name
        description: 'Task name.'
        required: true
        example: molestiae
        type: string
        custom: []
      description:
        name: description
        description: 'Task description.'
        required: false
        example: 'Ab reprehenderit vel voluptas error ut nisi.'
        type: string
        custom: []
      users:
        name: users
        description: 'Array of users identifier assigned to task.'
        required: false
        example:
          - beatae
        type: 'string[]'
        custom: []
      attachments:
        name: attachments
        description: 'Array of files attach to task ([{"name": "File name", "base64": Base64 encoded file, "description": "Optional file description"}])'
        required: false
        example:
          - non
        type: 'string[]'
        custom: []
    cleanBodyParameters:
      project_id: 19
      status_id: 19
      name: molestiae
      description: 'Ab reprehenderit vel voluptas error ut nisi.'
      users:
        - beatae
      attachments:
        - non
    fileParameters: []
    responses: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created task'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/task/{id}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get task details'
      description: 'Return task details.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 20
        type: integer
        custom: []
    cleanUrlParameters:
      id: 20
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "name": "Example task", "description": "Example description", "project_id": 1, "priority" : 2, "status_id": 2, "status": "To do", "created_at": "2020-01-01 10:00:00", "assigned_to": [1,2], "attachments": [{"id": 1, "user_id": 1, "type": "tasks", "filename": "filename.ext", "orig_name": "filename.ext", "extension": "ext", "size": 100, "description": "Example description", "created_at": "2020-01-01 10:00:00", "base64": "Base64 encode file content"}], "timer": {"state": "active", "total": 250, "total_logged": 1000}, "completed": 1, "status": "Done", "project_name": "Project name"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/task/{id}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update task'
      description: 'Update task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Task name.'
        required: false
        example: labore
        type: string
        custom: []
      status_id:
        name: status_id
        description: 'Status identifier.'
        required: false
        example: 15
        type: integer
        custom: []
      description:
        name: description
        description: 'Task description.'
        required: false
        example: 'Aperiam beatae inventore distinctio in vitae ipsam voluptatibus exercitationem.'
        type: string
        custom: []
      users:
        name: users
        description: 'Array of users identifier assigned to task.'
        required: false
        example: 13
        type: integer
        custom: []
    cleanBodyParameters:
      name: labore
      status_id: 15
      description: 'Aperiam beatae inventore distinctio in vitae ipsam voluptatibus exercitationem.'
      users: 13
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/task/{id}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete task'
      description: 'Delete task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 14
        type: integer
        custom: []
    cleanUrlParameters:
      id: 14
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/task/{id}/assign'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Assign user to task'
      description: 'Assign user to task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 11
        type: integer
        custom: []
    cleanUrlParameters:
      id: 11
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'User identifier.'
        required: true
        example: 6
        type: integer
        custom: []
    cleanBodyParameters:
      user_id: 6
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Assign status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/task/{id}/deassign'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Deassign user from task'
      description: 'Deassign user from task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 5
        type: integer
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'User identifier.'
        required: true
        example: 20
        type: integer
        custom: []
    cleanBodyParameters:
      user_id: 20
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Deassign status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/task/{id}/attachment/{aid}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get attachment from task'
      description: 'Get attachment from task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 17
        type: integer
        custom: []
      aid:
        name: aid
        description: 'Attachment identifier.'
        required: true
        example: 16
        type: integer
        custom: []
    cleanUrlParameters:
      id: 17
      aid: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "user_id": 1, "type": "tasks", "filename": "filename.ext", "orig_name": "filename.ext", "extension": "ext", "size": 100, "description": "Example description", "created_at": "2020-01-01 10:00:00", "base64": "Base64 encode file content"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/task/{id}/attachment'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Add attachment to task'
      description: 'Add attachment to task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 10
        type: integer
        custom: []
    cleanUrlParameters:
      id: 10
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'File name.'
        required: true
        example: aut
        type: string
        custom: []
      base64:
        name: base64
        description: 'Base64 encode file content".'
        required: true
        example: modi
        type: string
        custom: []
      description:
        name: description
        description: 'Description".'
        required: false
        example: 'Ad aut aperiam dolor a.'
        type: string
        custom: []
    cleanBodyParameters:
      name: aut
      base64: modi
      description: 'Ad aut aperiam dolor a.'
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Add attachment status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/task/{id}/attachment/{aid}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove attachment from task'
      description: 'Remove attachment from task.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Task identifier.'
        required: true
        example: 18
        type: integer
        custom: []
      aid:
        name: aid
        description: 'Attachment identifier.'
        required: true
        example: 18
        type: integer
        custom: []
    cleanUrlParameters:
      id: 18
      aid: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Remove attachment status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/task/users/{id?}'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get task allowed users'
      description: 'Get task allowed users ready to assigned.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'optional Task identifier.'
        required: false
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '[{"id":2,"firstname":"John","lastname":"Doe","email":"john.doe@gmail.com","_me":true,"_allowed":true,"_check":false}]'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/task/{id}/close'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Close task'
      description: 'Set task as closed.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'optional Task identifier.'
        required: false
        example: 8
        type: integer
        custom: []
    cleanUrlParameters:
      id: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/task/{id}/open'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Open task'
      description: 'Set task as opened.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'optional Task identifier.'
        required: false
        example: 5
        type: integer
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/tasks/my-work
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'My work'
      description: 'Get logged user opened and assigned tasks.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id": "1", "name": "Example task", "description": "Example description", "project_id": 1, "priority" : 2, "created_at": "2020-01-01 10:00:00", "assigned_to": [1,2], "attachments": [{"id": 1, "user_id": 1, "type": "tasks", "filename": "filename.ext", "orig_name": "filename.ext", "extension": "ext", "size": 100, "description": "Example description", "created_at": "2020-01-01 10:00:00", "base64": "Base64 encode file content"}], "timer": {"state": "active", "total": 250, "total_logged": 1000}, "completed": 1, "status": "Done"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/task/{id}/time'
    metadata:
      groupName: Tasks
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Return total logged time'
      description: 'Return total logged time'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Task does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Total logged time in seconds'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
