## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get users list'
      description: 'Return users account list.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      size:
        name: size
        description: 'Number of rows. Default: 50'
        required: false
        example: 7
        type: integer
        custom: []
      page:
        name: page
        description: 'Number of page (pagination). Default: 1'
        required: false
        example: 10
        type: integer
        custom: []
    cleanQueryParameters:
      size: 7
      page: 10
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "can_delete": 1, "user_permission_id": 1, "user_permission_name": "Permission name"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create user account'
      description: 'Create user account. After create account is ready to use.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: true
        example: modi
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: true
        example: a
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: true
        example: cielo49@example.net
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: true
        example: 'v;.3HA\,j2B{ab62'
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: sunt
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier (if not set default permission will be used).'
        required: false
        example: 9
        type: integer
        custom: []
      superuser:
        name: superuser
        description: 'If set true user have full access regardless of permissions.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      firstname: modi
      lastname: a
      email: cielo49@example.net
      password: 'v;.3HA\,j2B{ab62'
      phone: sunt
      user_permission_id: 9
      superuser: true
    fileParameters: []
    responses:
      -
        status: 409
        content: '{"error":true,"message":"The given e-mail address is already registered"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created user'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/invite
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Invite user'
      description: 'Send invitation to the email address provided.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'User e-mail address.'
        required: true
        example: dangelo11@example.net
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier (if not set default permission will be used).'
        required: false
        example: 4
        type: integer
        custom: []
    cleanBodyParameters:
      email: dangelo11@example.net
      user_permission_id: 4
    fileParameters: []
    responses:
      -
        status: 409
        content: '{"error":true,"message":"The given e-mail address is already registered"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: Status
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user account data'
      description: 'Return user account data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 7
        type: integer
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "can_delete": 1, "user_permission_id": 1, "user_permission_name": "Permission name"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"User does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user account data'
      description: 'Update user account data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 4
        type: integer
        custom: []
    cleanUrlParameters:
      id: 4
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: false
        example: incidunt
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: false
        example: sequi
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: false
        example: murphy01@example.com
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: false
        example: 'y1SUc}l'
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: sunt
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier.'
        required: false
        example: 13
        type: integer
        custom: []
      superuser:
        name: superuser
        description: 'If set true user have full access regardless of permissions.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      firstname: incidunt
      lastname: sequi
      email: murphy01@example.com
      password: 'y1SUc}l'
      phone: sunt
      user_permission_id: 13
      superuser: true
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user account'
      description: 'Delete user account.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 6
        type: integer
        custom: []
    cleanUrlParameters:
      id: 6
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"User does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/permission
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get logged user permissions'
      description: 'Get logged user permissions'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"permission":{"project":["list","create","update","delete"],"task":["list","create","update","delete"],"user":["list","create","update","delete"],"permission":["list","create","update","delete"]}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/profile
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User profile'
      description: 'User profile.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "user_permission_id": 1, "user_permission_name": "Permission name"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/profile
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user profile'
      description: 'User profile.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: false
        example: magni
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: false
        example: pariatur
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: false
        example: lbeier@example.org
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: false
        example: 'T4wzZrcBRW\;U[ogn'
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: laudantium
        type: string
        custom: []
    cleanBodyParameters:
      firstname: magni
      lastname: pariatur
      email: lbeier@example.org
      password: 'T4wzZrcBRW\;U[ogn'
      phone: laudantium
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/settings
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User settings'
      description: 'User settings.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"locale": "pl"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/settings
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user settings'
      description: 'User settings.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      flocale:
        name: flocale
        description: 'Locale ex. pl.'
        required: false
        example: ha_GH
        type: string
        custom: []
    cleanBodyParameters:
      flocale: ha_GH
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/get-firm-id
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get login user firm identifier'
      description: 'Get login user firm identifier.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Firm identifier'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/get-id
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get login user identifier'
      description: 'Get login user identifier.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'User identifier'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/invite/{token}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Validate invite token'
      description: 'Check validate invite token.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: 'Invite token from invitation message.'
        required: true
        example: sed
        type: string
        custom: []
    cleanUrlParameters:
      token: sed
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: "{'email': 'john@doe.com'}"
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"The given token is invalid"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/invite/{token}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Confirm invitation'
      description: 'Confirm invitation and create new user account.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: 'Invite token.'
        required: true
        example: non
        type: string
        custom: []
    cleanUrlParameters:
      token: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: true
        example: tempore
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: true
        example: aut
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: true
        example: "'=z`^MHf"
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: et
        type: string
        custom: []
    cleanBodyParameters:
      firstname: tempore
      lastname: aut
      password: "'=z`^MHf"
      phone: et
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"The given token is invalid"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created user'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
