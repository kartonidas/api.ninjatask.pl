name: 'User management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get users list'
      description: 'Return users account list.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      size:
        name: size
        description: 'Number of rows. Default: 50'
        required: false
        example: 19
        type: integer
        custom: []
      page:
        name: page
        description: 'Number of page (pagination). Default: 1'
        required: false
        example: 18
        type: integer
        custom: []
    cleanQueryParameters:
      size: 19
      page: 18
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "can_delete": 1, "user_permission_id": 1, "user_permission_name": "Permission name"}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create user account'
      description: 'Create user account. After create account is ready to use.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: true
        example: officiis
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: true
        example: voluptas
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: true
        example: hintz.ken@example.org
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: true
        example: '#)%7D,VyN(.0O&e'
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: enim
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier (if not set default permission will be used).'
        required: false
        example: 20
        type: integer
        custom: []
      superuser:
        name: superuser
        description: 'If set true user have full access regardless of permissions.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      firstname: officiis
      lastname: voluptas
      email: hintz.ken@example.org
      password: '#)%7D,VyN(.0O&e'
      phone: enim
      user_permission_id: 20
      superuser: true
    fileParameters: []
    responses:
      -
        status: 409
        content: '{"error":true,"message":"The given e-mail address is already registered"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created user'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/invite
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Invite user'
      description: 'Send invitation to the email address provided.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'User e-mail address.'
        required: true
        example: zwyman@example.net
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier (if not set default permission will be used).'
        required: false
        example: 16
        type: integer
        custom: []
    cleanBodyParameters:
      email: zwyman@example.net
      user_permission_id: 16
    fileParameters: []
    responses:
      -
        status: 409
        content: '{"error":true,"message":"The given e-mail address is already registered"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: Status
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user account data'
      description: 'Return user account data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 9
        type: integer
        custom: []
    cleanUrlParameters:
      id: 9
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "can_delete": 1, "user_permission_id": 1, "user_permission_name": "Permission name"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"User does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user account data'
      description: 'Update user account data.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 8
        type: integer
        custom: []
    cleanUrlParameters:
      id: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: false
        example: molestiae
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: false
        example: iusto
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: false
        example: kallie.wuckert@example.net
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: false
        example: '8XS!kXL[4aX$C`Tf'
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: ut
        type: string
        custom: []
      user_permission_id:
        name: user_permission_id
        description: 'Permission group identifier.'
        required: false
        example: 15
        type: integer
        custom: []
      superuser:
        name: superuser
        description: 'If set true user have full access regardless of permissions.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      firstname: molestiae
      lastname: iusto
      email: kallie.wuckert@example.net
      password: '8XS!kXL[4aX$C`Tf'
      phone: ut
      user_permission_id: 15
      superuser: true
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/user/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user account'
      description: 'Delete user account.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'User identifier.'
        required: true
        example: 11
        type: integer
        custom: []
    cleanUrlParameters:
      id: 11
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"User does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/permission
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get logged user permissions'
      description: 'Get logged user permissions'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"permission":{"project":["list","create","update","delete"],"task":["list","create","update","delete"],"user":["list","create","update","delete"],"permission":["list","create","update","delete"]}}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/profile
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User profile'
      description: 'User profile.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id": 1, "firstname": "John", "lastname": "Doe", "phone": 123456789, "email": "john@doe.com", "activated": 1, "owner": 0, "superuser": 0, "user_permission_id": 1, "user_permission_name": "Permission name"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/profile
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user profile'
      description: 'User profile.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: false
        example: nam
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: false
        example: neque
        type: string
        custom: []
      email:
        name: email
        description: 'User e-mail address.'
        required: false
        example: mward@example.org
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: false
        example: JSr19SDk
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: at
        type: string
        custom: []
    cleanBodyParameters:
      firstname: nam
      lastname: neque
      email: mward@example.org
      password: JSr19SDk
      phone: at
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/settings
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User settings'
      description: 'User settings.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"locale": "pl"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/settings
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user settings'
      description: 'User settings.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      locale:
        name: locale
        description: 'Locale ex. pl.'
        required: false
        example: ny_MW
        type: string
        custom: []
      notifications:
        name: notifications
        description: 'User e-mail notifications (separated by a comma)'
        required: false
        example: quibusdam
        type: string
        custom: []
    cleanBodyParameters:
      locale: ny_MW
      notifications: quibusdam
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/get-firm-id
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get login user firm identifier'
      description: 'Get login user firm identifier.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Firm identifier'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/get-id
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get login user identifier'
      description: 'Get login user identifier.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'User identifier'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/getActiveTimer
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get active timer'
      description: 'Get user active timer list.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total": 100, "data": [{"id": 1, "task_id": 12, "status": "active", "total": 1, "task": "Task name"}]}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/firm-data
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get firm data'
      description: 'Get firm data'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"identifier": "Firm ID", "firstname": "John", "lastname": "Doe", "email": "example@com.pl", "nip": "0123456789", "name": "Firm name", "street": "Street name", "house_no": "12", "apartment_no": "1A", "city": "London", "zip": "91-000", "country_id": 123, "phone": "888777666"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/firm-data
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update firm data'
      description: 'Update firm data'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'Owner first name.'
        required: false
        example: nihil
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'Owner last name.'
        required: false
        example: quibusdam
        type: string
        custom: []
      email:
        name: email
        description: 'Firm e-mail address.'
        required: false
        example: graham.gladyce@example.net
        type: string
        custom: []
      nip:
        name: nip
        description: NIP.
        required: false
        example: facere
        type: string
        custom: []
      name:
        name: name
        description: 'Firm name.'
        required: false
        example: veritatis
        type: string
        custom: []
      street:
        name: street
        description: 'Firm street.'
        required: false
        example: necessitatibus
        type: string
        custom: []
      house_no:
        name: house_no
        description: 'Firm house no.'
        required: false
        example: et
        type: string
        custom: []
      apartment_no:
        name: apartment_no
        description: 'Firm apartment no.'
        required: false
        example: non
        type: string
        custom: []
      city:
        name: city
        description: 'Firm city.'
        required: false
        example: ducimus
        type: string
        custom: []
      zip:
        name: zip
        description: 'Firm zip.'
        required: false
        example: nobis
        type: string
        custom: []
      country_id:
        name: country_id
        description: 'Firm country identifier.'
        required: false
        example: 12
        type: integer
        custom: []
      phone:
        name: phone
        description: 'Firm phone.'
        required: false
        example: voluptatibus
        type: string
        custom: []
    cleanBodyParameters:
      firstname: nihil
      lastname: quibusdam
      email: graham.gladyce@example.net
      nip: facere
      name: veritatis
      street: necessitatibus
      house_no: et
      apartment_no: non
      city: ducimus
      zip: nobis
      country_id: 12
      phone: voluptatibus
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/invite/{token}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Validate invite token'
      description: 'Check validate invite token.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: 'Invite token from invitation message.'
        required: true
        example: architecto
        type: string
        custom: []
    cleanUrlParameters:
      token: architecto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: "{'email': 'john@doe.com'}"
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"The given token is invalid"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/invite/{token}'
    metadata:
      groupName: 'User management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Confirm invitation'
      description: 'Confirm invitation and create new user account.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: 'Invite token.'
        required: true
        example: tempore
        type: string
        custom: []
    cleanUrlParameters:
      token: tempore
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      firstname:
        name: firstname
        description: 'User first name.'
        required: true
        example: porro
        type: string
        custom: []
      lastname:
        name: lastname
        description: 'User last name.'
        required: true
        example: et
        type: string
        custom: []
      password:
        name: password
        description: 'User password (min 8 characters, lowercase and uppercase letters, number, special characters).'
        required: true
        example: hjD^B`-9d-4NXHY(TY
        type: string
        custom: []
      phone:
        name: phone
        description: 'User phone number.'
        required: false
        example: nihil
        type: string
        custom: []
    cleanBodyParameters:
      firstname: porro
      lastname: et
      password: hjD^B`-9d-4NXHY(TY
      phone: nihil
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"The given token is invalid"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created user'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
